<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class NeighborhoodPolygon extends \Application\Entity\NeighborhoodPolygon implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getNeighborhood()
    {
        $this->__load();
        return parent::getNeighborhood();
    }

    public function setNeighborhood($data)
    {
        $this->__load();
        return parent::setNeighborhood($data);
    }

    public function getRegion()
    {
        $this->__load();
        return parent::getRegion();
    }

    public function setRegion($data)
    {
        $this->__load();
        return parent::setRegion($data);
    }

    public function getWhathoodUser()
    {
        $this->__load();
        return parent::getWhathoodUser();
    }

    public function setWhathoodUser($data)
    {
        $this->__load();
        return parent::setWhathoodUser($data);
    }

    public function getDateTimeAdded()
    {
        $this->__load();
        return parent::getDateTimeAdded();
    }

    public function setDateTimeAdded($dateTimeAdded)
    {
        $this->__load();
        return parent::setDateTimeAdded($dateTimeAdded);
    }

    public function setPolygon($data)
    {
        $this->__load();
        return parent::setPolygon($data);
    }

    public function getPolygon()
    {
        $this->__load();
        return parent::getPolygon();
    }

    public function getAuthrotiy()
    {
        $this->__load();
        return parent::getAuthrotiy();
    }

    public function setAuthority($authority)
    {
        $this->__load();
        return parent::setAuthority($authority);
    }

    public function getDeleted()
    {
        $this->__load();
        return parent::getDeleted();
    }

    public function setDeleted($bool)
    {
        $this->__load();
        return parent::setDeleted($bool);
    }

    public function getNeighborhoodVotes()
    {
        $this->__load();
        return parent::getNeighborhoodVotes();
    }

    public function setNeighborhoodVotes($neighborhoodVotes)
    {
        $this->__load();
        return parent::setNeighborhoodVotes($neighborhoodVotes);
    }

    public function toGeoJsonArray()
    {
        $this->__load();
        return parent::toGeoJsonArray();
    }

    public function offsetExists($index)
    {
        $this->__load();
        return parent::offsetExists($index);
    }

    public function offsetGet($index)
    {
        $this->__load();
        return parent::offsetGet($index);
    }

    public function offsetSet($index, $newval)
    {
        $this->__load();
        return parent::offsetSet($index, $newval);
    }

    public function offsetUnset($index)
    {
        $this->__load();
        return parent::offsetUnset($index);
    }

    public function append($value)
    {
        $this->__load();
        return parent::append($value);
    }

    public function getArrayCopy()
    {
        $this->__load();
        return parent::getArrayCopy();
    }

    public function count()
    {
        $this->__load();
        return parent::count();
    }

    public function getFlags()
    {
        $this->__load();
        return parent::getFlags();
    }

    public function setFlags($flags)
    {
        $this->__load();
        return parent::setFlags($flags);
    }

    public function asort()
    {
        $this->__load();
        return parent::asort();
    }

    public function ksort()
    {
        $this->__load();
        return parent::ksort();
    }

    public function uasort($cmp_function)
    {
        $this->__load();
        return parent::uasort($cmp_function);
    }

    public function uksort($cmp_function)
    {
        $this->__load();
        return parent::uksort($cmp_function);
    }

    public function natsort()
    {
        $this->__load();
        return parent::natsort();
    }

    public function natcasesort()
    {
        $this->__load();
        return parent::natcasesort();
    }

    public function unserialize($serialized)
    {
        $this->__load();
        return parent::unserialize($serialized);
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function getIterator()
    {
        $this->__load();
        return parent::getIterator();
    }

    public function exchangeArray($array)
    {
        $this->__load();
        return parent::exchangeArray($array);
    }

    public function setIteratorClass($iteratorClass)
    {
        $this->__load();
        return parent::setIteratorClass($iteratorClass);
    }

    public function getIteratorClass()
    {
        $this->__load();
        return parent::getIteratorClass();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'dateTimeAdded', 'polygon', 'authority', 'deleted', 'neighborhood', 'region', 'whathoodUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}