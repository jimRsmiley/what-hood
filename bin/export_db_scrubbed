#!/usr/bin/env ruby

# RUNS OUTSIDE OF THE DOCKER CONTAINER

require 'fileutils'

HOST="0.0.0.0"
USER="docker"
NUM_USER_BORDERS=`d-bin/exec run-app up count`

backup_dir = get_backup_dir()
rm_old_git_files(backup_dir)
backup_db(backup_dir)
commit_and_push(backup_dir)

BEGIN {

    def rm_old_git_files(backup_dir)
      puts "clearing repo: git rm -f *"
      Dir.chdir backup_dir
      system "git rm -f *"
    end

    def get_backup_dir
        bin_dir = File.dirname(__FILE__)
        cwd = Dir.pwd
        abs_path = "#{cwd}/#{bin_dir}"
        backup_dir="#{abs_path}/../../whathood_db"
		FileUtils.mkdir_p backup_dir
		Dir.chdir backup_dir

		unless system("git status")
		  puts "no git repository found in #{backup_dir}; initializing it"
  		  system "git clone https://github.com/whathood/whathood-data.git ."
        end

        return backup_dir
    end

    def backup_db(backup_dir)
        cmd="pg_dump -h #{HOST} -U #{USER} --no-owner whathood > #{backup_dir}/whathood_full_#{NUM_USER_BORDERS}.sql"
		puts cmd
		system cmd
        cmd="pg_dump -h #{HOST} -U #{USER} --no-owner --schema-only whathood > #{backup_dir}/whathood_schema_#{NUM_USER_BORDERS}.sql"
		puts cmd
        system cmd
        cmd="pg_dump -h #{HOST} -U #{USER} --no-owner --disable-triggers --data-only whathood > #{backup_dir}/whathood_data_#{NUM_USER_BORDERS}.sql"
		puts cmd
        system cmd
    end

    def commit_and_push(backup_dir)
		puts "trying backup dir #{backup_dir}"
        Dir.chdir backup_dir
        time = Time.new
        `git add -A`
        `git commit -m "re-exported whathood sql created at #{time}"`
        `git push`
    end
}
