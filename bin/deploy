#!/usr/bin/env ruby

# this script
#
#   run as root:
#     because this script copies over nginx configs and restarts the web server,
#     it must be run under sudo
#
#	* runs composer on the zend framework
#	* copies over the etc configs
#	    * foreman.conf for upstart
#	* builds the coffeescript
#	* kills any watchers and then restarts them
#

require 'optparse'
require 'pp'
require 'yaml'
require 'erb'
require 'fileutils'
require_relative '../libs/ruby/Whathood/Util.rb'

Whathood::Util.check_for_just_root_user()

cmd_args = parse_command_line

prompt_user = get_prompt_user(cmd_args)

if prompt_user
    Whathood::Util.prompt_user "Are you sure you want to deploy?"
end

# where's our source code
SRC_DIR = File.expand_path(File.join(File.dirname(__FILE__), ".."))

whathood_config = YAML.load(File.new("#{SRC_DIR}/whathood.yaml").read)

unless whathood_config
    abort "FATAL: unable to get config from #{SRC_DIR}/whathood.yaml"
end

unless whathood_config.has_key?('application_dir')
    abort "unable to locate appliation_dir in whathood.yaml"
end

# where will this app live?
APP_DIR = whathood_config['application_dir']

puts "*     Building Whathood App"
run_composer(APP_DIR)
run_grunt_coffee()
#start_foreman(SRC_DIR)
config_upstart(SRC_DIR)
update_nginx(SRC_DIR,APP_DIR)

exit

BEGIN {
    require_relative '../libs/ruby/Whathood/ErbalT.rb'

    def get_prompt_user(cmd_args)
        # if no-prompt wasn't even passed as a command line
        if cmd_args[:no_prompt] != true
            return true
        elsif cmd_args[:no_prompt] == true
            return false
        end
        return true
    end

    def parse_command_line
        options = {}
        OptionParser.new do |opts|
            opts.banner = "Usage: bin/deploy [options]"

            opts.on("--no-prompt", "Don't prompt the user for anything") do |no_prompt|
                #warn "setting option to true"
                options[:no_prompt] = true
            end
            opts.on("--watcher","Deploy watcher upstart script and start it") do |watcher|
                options[:watcher] = watcher
            end
        end.parse!
        return options
    end

    def update_nginx(src_dir,app_dir)
        log_dir = "/var/log/whathood"

        puts "*     updating nginx whathood.conf"

        nginx_template='etc/nginx/whathood.conf.erb'
        nginx_site_avail='/etc/nginx/sites-available/whathood.conf'
        nginx_site_enabled='/etc/nginx/sites-enabled/whathood.conf'

        text = Whathood::ErbalT.render_from_hash(File.read(nginx_template), {'application_dir' => app_dir})

        fh = File.open(nginx_site_avail,'w+')
        fh << text
        fh.close

        if !File.exists?(nginx_site_enabled)
            `sudo ln -s /etc/nginx/sites-available/whathood.conf /etc/nginx/sites-enabled/whathood.conf`
        end

        `sudo cp -f #{src_dir}/etc/php5-fpm/poold-whathood.conf /etc/php5/fpm/pool.d/whathood.conf`

        puts "*     checking existence and permissions for log_dir #{log_dir} directory"
        FileUtils.mkdir_p log_dir
        FileUtils.chown 'vagrant', 'vagrant', log_dir

        puts "*     restarting nginx, php5-fpm"
        `sudo service nginx reload && sudo service php5-fpm restart`
    end

    def run_composer(app_dir)
        Dir.chdir app_dir
        composer_file = "#{app_dir}/composer.phar"
        if File.exists? composer_file
            puts "*     composer already exists; no need to install"
        else
            puts "*     installing composer"
            system("curl -sS https://getcomposer.org/installer | php > /dev/null 2>&1")
        end
        puts "*     installing vendor libraries"
        puts "current working directory: "+Dir.pwd
        system("php composer.phar install")
        setup_doctrine_proxy_dir app_dir
    end

    def setup_doctrine_proxy_dir(app_dir)
        FileUtils.mkdir_p "#{app_dir}/data/DoctrineORMModule"
    end

    def run_grunt_coffee

        # make sure we have all the grunt tasks
        puts "*     run_grunt_coffee...."
        Dir.chdir SRC_DIR
        system('make grunt')
    end

    def start_foreman(src_dir)
        puts "*     spinning up foreman"
        Dir.chdir src_dir
        cmd = "sudo -H -u vagrant foreman start >> /var/log/whathood/foreman.log"

        job1 = fork do
              exec cmd
        end

        Process.detach(job1)
    end

    def config_upstart(src_dir)
        puts "*     running foreman export upstart"
        Dir.chdir src_dir
        upstart_prefix = 'whathood'
        upstart_log_dir = '/var/log/whathood'
        `rm -f /etc/init/#{upstart_prefix}*`
        `rm -f /var/log/upstart/#{upstart_prefix}*`
        #cmd = "rvmsudo foreman export upstart /etc/init --user vagrant --log #{upstart_log_dir} -a #{upstart_prefix}"
        cmd = "sudo foreman export upstart --user vagrant --log #{upstart_log_dir} -a #{upstart_prefix} /etc/init"
        puts cmd
        `#{cmd}`
        `sudo service whathood restart`
    end
}
