#!/usr/bin/env ruby

# this script
#
#   run as root:
#     because this script copies over nginx configs and restarts the web server,
#     it must be run under sudo
#
#	* runs composer on the zend framework
#	* builds the coffeescript
#	* copies all of the source code into /opt/whathood
#	* kills any watchers and then restarts them
#

require 'optparse'
require 'pp'
require 'yaml'
require 'erb'
require 'fileutils'
require_relative '../libs/ruby/Whathood/Util.rb'

Whathood::Util.check_for_just_root_user()

cmd_args = parse_command_line

prompt_user = get_prompt_user(cmd_args)

if prompt_user
    Whathood::Util.prompt_user "Are you sure you want to deploy? Enter to continue [CTRL-C] to abort"
end

# where's our source code
SRC_DIR = File.expand_path(File.join(File.dirname(__FILE__), ".."))
# where's the app root
APP_DIR = "#{SRC_DIR}/app"

whathood_config = YAML.load(File.new("#{SRC_DIR}/whathood.yaml").read)

unless whathood_config
    abort "FATAL: unable to get config from #{SRC_DIR}/whathood.yaml"
end

unless whathood_config.has_key?('application_dir')
    abort "unable to locate appliation_dir in whathood.yaml"
end

DEST_DIR=whathood_config['application_dir']

if cmd_args[:watcher]
  init_watcher()
else
  update_nginx()
  deploy_new_code()
end

exit

BEGIN {
    require_relative '../libs/ruby/Whathood/ErbalT.rb'

    def get_prompt_user(cmd_args)
        # if no-prompt wasn't even passed as a command line
        if cmd_args[:no_prompt] != true
            return true
        elsif cmd_args[:no_prompt] == true
            return false
        end
        return true
    end

    def parse_command_line
        options = {}
        OptionParser.new do |opts|
            opts.banner = "Usage: bin/deploy [options]"

            opts.on("--no-prompt", "Don't prompt the user for anything") do |no_prompt|
                #warn "setting option to true"
                options[:no_prompt] = true
            end
            opts.on("--watcher","Deploy watcher upstart script and start it") do |watcher|
                options[:watcher] = watcher
            end
        end.parse!
        return options
    end

    # run composer, run grunt for coffeescript
    # and if the source and destination dirs aren't the same,
    # copy source to destination dir
    def deploy_new_code
        puts "*     Building Whathood App"
        run_composer()
        run_grunt_coffee()

        if SRC_DIR != DEST_DIR
            delete_dest_code()
            copy_to_dest()
        end
        init_watcher()
    end

    def update_nginx
        log_dir = "/var/log/whathood"

        puts "*     updating nginx whathood.conf"

        nginx_template='etc/nginx/whathood.conf.erb'
        nginx_site_avail='/etc/nginx/sites-available/whathood.conf'
        nginx_site_enabled='/etc/nginx/sites-enabled/whathood.conf'

        text = Whathood::ErbalT.render_from_hash(File.read(nginx_template), {'application_dir' => DEST_DIR})

        fh = File.open(nginx_site_avail,'w+')
        fh << text
        fh.close

        if !File.exists?(nginx_site_enabled)
            `sudo ln -s /etc/nginx/sites-available/whathood.conf /etc/nginx/sites-enabled/whathood.conf`
        end

        `sudo cp -f #{APP_DIR}/../etc/php5-fpm/poold-whathood.conf /etc/php5/fpm/pool.d/whathood.conf`

        puts "*     checking existence and permissions for log_dir #{log_dir} directory"
        FileUtils.mkdir_p log_dir
        FileUtils.chown 'vagrant', 'vagrant', log_dir

        puts "*     restarting nginx, php5-fpm"
        `sudo service nginx reload && sudo service php5-fpm restart`
    end

    def run_composer
        Dir.chdir APP_DIR
        if File.exists? "#{APP_DIR}/composer.phar"
            p "*     composer already exists; no need to install"
        else
            p "*     installing composer"
            `curl -sS https://getcomposer.org/installer | php > /dev/null 2>&1`
        end
        p "*     installing vendor libraries"
        `php composer.phar install > /dev/null 2>&1`
    end

    def run_grunt_coffee

        # make sure we have all the grunt tasks
        p "*     run_grunt_coffee...."
        Dir.chdir SRC_DIR
        system('make grunt')
    end

	def delete_dest_code
		puts "*     * cleaning out #{DEST_DIR}"
		cmd = "rm -rf #{DEST_DIR}/app"
		`#{cmd}`

        cmd = "rm -f #{DEST_DIR}/*"
		`#{cmd}`
	end

    def copy_to_dest
        puts "*     copying files from #{SRC_DIR} to #{DEST_DIR}"
        cmd = "rsync -av --quiet #{SRC_DIR}/app/ #{DEST_DIR}/app"
        system(cmd)
        `cp #{SRC_DIR}/run-app #{DEST_DIR}`
		puts "*     setting doctrine proxy dest dir to all writeable"
        `mkdir -p #{DEST_DIR}/app/data/DoctrineORMModule`
        `chmod 777 #{DEST_DIR}/app/data/DoctrineORMModule -R`
    end

    def init_watcher
        puts "*     starting whathood watch process"
        `sudo cp -f #{SRC_DIR}/etc/upstart/whwatcher.conf /etc/init`
        `sudo service whwatcher restart`
    end
}
