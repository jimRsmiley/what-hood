#!/usr/bin/env ruby

DATA_DIR="data/whathood_db"
SCHEMA_DIR="app/scripts/schema"
DB_NAME="whathood"
DB_BAK_FILE="#{DATA_DIR}/whathood_data.sql"
DB_USER="vagrant"

require 'fileutils'
require_relative '../libs/ruby/Whathood/Util.rb'

Whathood::Util.check_for_just_root_user()

Whathood::Util.prompt_user "warning: this will destroy the current db"

rebuild_db(DB_NAME,DB_USER)
load_whathood_schema(DB_NAME,DB_USER)
load_functions()
import_data(DATA_DIR,DB_NAME,DB_BAK_FILE,DB_USER)

puts "*     done in bin/import/db"

BEGIN {

    def start_postgres_if_necessary()
        puts "*     starting postgres if necessary"
        result = system("sudo service postgresql start");
        #puts "result of service start: #{result}"
        puts "*     Sleeping for 5..."
        sleep 5;
        result = `ps aux | grep postgres | grep -v grep`

        if result.empty?
            abort "FATAL: unable to start postgresql"
        end

        #puts "result of ps aux: #{result}"
    end

    def rebuild_db(db_name,db_user)
        puts "*     rebuild_db"
        start_postgres_if_necessary()
        puts "dropping database #{db_name} if it exists"
        cmd = "sudo -u postgres dropdb --if-exists #{db_name}"
        puts "trying to run command: '#{cmd}'"
        unless system(cmd)
            abort "FATAL: could not drop old database '#{db_name}' if it existed"
        end

        puts "creating user"
        # we need a user for vagrant, so we can psql, but whathood php uses 'whathood'
        `sudo -u postgres dropuser --if-exists #{db_user}`
        `sudo -u postgres dropuser --if-exists whathood`
        `sudo -u postgres createuser --superuser whathood`
        `sudo -u postgres createuser --superuser #{db_user}`

        puts "creating database"
        `sudo -u postgres createdb #{db_name}`
        puts "creating postgis extension"
        `sudo -u postgres psql -c "CREATE EXTENSION postgis" #{db_name}`
        `sudo -u postgres psql -c "CREATE SCHEMA whathood" #{db_name}`
    end

    def load_whathood_schema(db_name,db_user)
        puts "*     loading whathood schema with user #{db_user}"
        `sudo -u vagrant bin/doctrine_orm_schema_create | sudo -u postgres psql -U #{db_user} #{db_name}`
        puts "*     applying indexes"
        `sudo -u vagrant psql -U #{db_user} -f app/scripts/schema/whathood.indexes.sql #{db_name}`
    end

    def load_functions
        puts "*     loading functions"
        `./dev-bin/load_sql_functions`
    end

    def import_data(data_dir, db_name, db_bak_file, db_user)
        if !File.exists?(data_dir) # if the data dir doesn't exist
            puts "data dir #{data_dir} doesn't exist, must clone repo"
            clone_data_repo(data_dir)
        else
            _old_dir = Dir.pwd
            Dir.chdir data_dir
            local_sha = system('git rev-parse HEAD')
            remote_sha = system('git rev-parse origin/master')
            if local_sha != remote_sha
                puts "git data repos are different; cloning database data"
            else
                puts "git db repos are equal, no need to clone"
            end

            Dir.chdir _old_dir
        end

        if !File.exists?(db_bak_file)
            abort "FATAL: file db_bak_file '#{db_bak_file} does not exist"
        end

        puts "*     importing db file db_bak_file to db #{db_name}"
        `psql -U #{db_user} -f #{db_bak_file} #{db_name}`
    end

    def clone_data_repo(data_dir)
        puts "deleting previous data directory '#{data_dir}'"
        FileUtils.rmdir data_dir, true
        FileUtils.mkdir_p data_dir
        `git clone https://github.com/jimRsmiley/whathood-data.git #{data_dir} > /dev/null`
    end
}
