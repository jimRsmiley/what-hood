#!/usr/bin/env ruby

DATA_DIR="data/whathood_db"
SCHEMA_DIR="app/scripts/schema"
DB_NAME="whathood"
DB_BAK_FILE="$DATA_DIR/whathood_data.sql"

require_relative '../libs/ruby/Whathood/Util.rb'

Whathood::Util.check_for_just_root_user()

Whathood::Util.prompt_user "warning: this will destroy the current db"

rebuild_db(DB_NAME)
load_schema(DB_NAME)
load_functions()
import_data()

BEGIN {
    def load_functions
        print "*     loading functions\n"
        `./dev-bin/load_sql_functions`
    end

    def load_schema(db_name)
        print "*     loading schema\n"
        `sudo -u vagrant bin/doctrine_orm_schema_create | sudo -u postgres psql #{db_name}`
        print "*     applying indexes\n"
        `psql -f app/scripts/schema/whathood.indexes.sql #{db_name}`
    end

    def rebuild_db(db_name)
        print "*     rebuild_db\n"
        print "dropping database #{db_name} if it exists\n"
        `sudo -u postgres dropdb --if-exists #{db_name}`
        print "creating user\n"
        `sudo -u postgres dropuser --if-exists #{db_name}`
        `sudo -u postgres createuser --superuser #{db_name}`
        print "creating database\n"
        `sudo -u postgres createdb #{db_name}`
        print "creating postgis extension\n"
        `sudo -u postgres psql -c "CREATE EXTENSION postgis" #{db_name}`
        `sudo -u postgres psql -c "CREATE SCHEMA whathood" #{db_name}`
    end

    def import_data(data_dir, db_name, db_bak_file)
        if !File.exists?(data_dir) # if the data dir doesn't exist
            puts "data dir #{data_dir} doesn't exist, must clone repo"
            clone_data_repo()
        else
            _old_dir = cwd()
            Dir.chdir data_dir
            local_sha = system('git rev-parse HEAD')
            remote_sha = system('git rev-parse origin/master')
            if local_sha ne remote_sha
                puts "git data repos are different; cloning database data"
            else
                puts "git db repos are equal, no need to clone"
            end

            Dir.chdir _old_dir
        end

        if !File.exists?(db_bak_file)
            die("FATAL: file db_bak_file does not exist")
        end

        puts "*     importing db file db_bak_file to db #{db_name}"
        `psql -f #{db_bak_file} #{db_name}`
    end

    def clone_data_repo
        print "deleting previous data directory\n"
        `rm -rf $DATA_DIR`
        `mkdir -p $DATA_DIR`
        `git clone https://github.com/jimRsmiley/whathood-data.git $DATA_DIR > /dev/null`
    end
}
