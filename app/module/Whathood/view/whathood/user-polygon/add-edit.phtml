<?php

// from ViewModel
$form = $this->form;

$form->setAttribute('action', $this->serverUrl(true) );
$form->setAttribute('class','form-horizontal');

$neighborhoodPolygon    = $form->get('neighborhoodPolygon');
$whathoodUser           = $neighborhoodPolygon->get('whathoodUser');
$currentWhathoodUser    = $this->currentWhathoodUser;
$currentNeighborhoods = $this->currentNeighborhoods;

$neighborhoodNames = array();
foreach( $currentNeighborhoods as $n ) {
    $neighborhoodNames[] = $n->getName();
}

$form->prepare();
$partialElementPath
    = 'whathood/neighborhood/partial_neighborhood_form_element.phtml';
?>

    <?php echo $this->form()->openTag($form);?>

        <?php foreach( $form->getMessages() as $message ) : ?>
            <div><?=\Zend\Debug\Debug::dump($message,null,false);?></div>
        <?php endforeach; ?>

        <?php
        /*
         * Neighborhood Name
         */
        echo $this->partial( $partialElementPath,
                    array( 'formElement'=> $neighborhoodPolygon
                                        ->get('neighborhood')->get('name') ) );
        ?>

        <div id="no-match-neighborhood"></div>

        <div class='row-fluid morepadding'>
            <?php echo $this->formElement($form->get('submit')->setAttribute('class','span6'))?>
        </div>

        <?php
        /*
         * polygonGeoJson
         */
        echo $this->formRow( $form->get('polygonGeoJson') ) . "\n" ?>

        <div><p>Begin drawing the neighborhood borders by clicking the <img src="/images/polygon-button.png" alt="Polygon"/> button</p></div>

        <div class='row-fluid'>
            <div class="map map_add" id="map" style='padding: 0; margin: 0'></div>
        </div>




    <?php echo $this->form()->closeTag() . "\n"; ?>

    <?php if( $this->isNeighborhoodOwner($neighborhoodPolygon,$currentWhathoodUser) ) : ?>
            <div class="well-large">
                put the neighborhood admin stuff here
            </div>
    <?php endif; ?>


<script>

/**
 * figure out how to center the map, if lat,lng have been specified, use that,
 * else, try and get the position from the browser, then call setupMap to draw
 * the map
 */
function init() {

   var lat          = getURLParameter( 'centerLat');
   var lng          = getURLParameter( 'centerLng');
   var regionName   = getURLParameter( 'region_name' );

   if( lat == 'null' || lng == 'null' ) {
        console.log("init(): lat or lng is null, let's geocode region");
        geocoder = new google.maps.Geocoder();
        geocoder.geocode( { 'address': regionName + ", USA"}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                position = results[0].geometry.location;
                setUpMap(position.lat(),position.lng());
            } else {
              console.log("Geocode was not successful for the following reason: " + status);
            }
        });
   } else {
       console.log( "init(); GET supplied lat=" + lat + " lng=" + lng );
       setUpMap(lat,lng);
   }
}

var map;


function submitAddForm() {

    if( $('input[name="neighborhoodPolygon\\[neighborhood\\]\\[name\\]"]').val()  == '' )
        alert( 'you must enter a neighborhood name' );

    if( map.getDrawnGeoJson() == null ) {
        alert("you must draw a neighborhood to continue");
        return false;
    }
    ;
    var hiddenJsonCssSelector = 'input[name=polygonGeoJson]';
    var neighborhoodJson = $(hiddenJsonCssSelector).val();

    if( typeof neighborhoodJson == 'undefined' ) {
      alert( 'we did not get the neighborhood json' );
    }

    $(hiddenJsonCssSelector).val( JSON.stringify(map.getDrawnGeoJson()) );
    console.log( "drawn-polygon-geojson: " + $(hiddenJsonCssSelector).val() );
    $('#AddNeighborhood').submit();
    return true;
}

function loadNeighborhoodNames() {
  <?php if( !empty($neighborhoodNames) ) : ?>

    var availableNeighborhoods = [<?=$this->arrayToDoubleQuoteElementedCSV($neighborhoodNames)?>];

    $( "input[name=neighborhoodPolygon\\[neighborhood\\]\\[name\\]]" ).autocomplete({
      source: availableNeighborhoods,
      response: function(event, ui) {
            // ui.content is the array that's about to be sent to the response callback.
            if (ui.content.length === 0) {
                $("#no-match-neighborhood").html("You're about to add a brand new neighborhood name!  How exciting, just make sure no other name matches what you're trying to do");
            } else {
                $("#no-match-neighborhood").empty();
            }
        }
    });

    <?php endif; ?>
}

$('document').ready( function() {
    var window = (typeof exports !== "undefined" && exports !== null) ? exports : window;
    Whathood = window.Whathood;

    var options = {
      center : [<?=$region->getCenterPoint()->getY()?>,<?=$region->getCenterPoint()->getX()?>]
    };

    map = new Whathood.DrawMap( 'map' );
    map.addStreetLayer();
    map.addLeafletDraw();

    loadNeighborhoodNames();

});

</script>

